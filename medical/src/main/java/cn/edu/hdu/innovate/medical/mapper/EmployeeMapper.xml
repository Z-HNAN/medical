<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.hdu.innovate.medical.mapper.EmployeeMapper">
  <resultMap id="BaseResultMap" type="cn.edu.hdu.innovate.medical.domain.Employee">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="realname" jdbcType="VARCHAR" property="realname" />
    <result column="gender" jdbcType="TINYINT" property="gender" />
    <result column="id_number" jdbcType="VARCHAR" property="idNumber" />
    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="job_id" jdbcType="VARCHAR" property="jobId" />
    <result column="bank_number" jdbcType="VARCHAR" property="bankNumber" />
    <!-- 额外SQL查询所属单位信息 -->
    <collection property="comDept" column="com_dept_id"
                ofType="cn.edu.hdu.innovate.medical.domain.ComDept" select="cn.edu.hdu.innovate.medical.mapper.ComDeptMapper.selectByPrimaryKey" />
  </resultMap>
  
  <delete id="deleteByPrimaryKey" >
    delete from `employee`
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id"  useGeneratedKeys="true">
    insert into `employee` (id, realname, gender, id_number, 
      phone_number, job_id, bank_number, 
      com_dept_id)
    values (#{id},#{realname,jdbcType=VARCHAR}, #{gender,jdbcType=TINYINT}, #{idNumber,jdbcType=VARCHAR}, 
      #{phoneNumber,jdbcType=VARCHAR}, #{jobId,jdbcType=VARCHAR}, #{bankNumber,jdbcType=VARCHAR}, 
      #{comDept.id,jdbcType=BIGINT})
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="cn.edu.hdu.innovate.medical.domain.Employee">
    update `employee`
    set realname = #{realname,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=TINYINT},
      id_number = #{idNumber,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      job_id = #{jobId,jdbcType=VARCHAR},
      bank_number = #{bankNumber,jdbcType=VARCHAR},
      com_dept_id = #{comDept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap">
    select <include refid="base_column"/>
    from `employee`
    where id = #{id,jdbcType=BIGINT}
  </select>
  
  <select id="getIdByJobIdOrRealname" resultType="java.lang.Long">
  	SELECT id FROM `employee`
  	WHERE (job_id LIKE concat('%',#{jobId},'%')) OR (realname like concat('%',#{realname},'%'))
  </select>

  <sql id="base_column">
    id, realname, gender, id_number, phone_number, job_id, bank_number, com_dept_id
  </sql>

  <sql id="base_where">
    <where>
      <if test="((depts != null) and (depts.size > 0))">
        AND com_dept_id IN
        <foreach collection="depts" item="id" index="index" open="(" close=")" separator=",">
          #{id}
        </foreach>
      </if>
      <if test="realname != null and realname != ''">
        AND realname LIKE concat('%', #{realname}, '%')
      </if>
      <if test="jobId != null and jobId !=''">
        AND job_id = #{jobId}
      </if>
    </where>
  </sql>

  <select id="queryInComIdForCount" resultType="java.lang.Integer">
    SELECT COUNT(id) FROM `employee`
    <include refid="base_where"/>
  </select>

  <select id="queryInComIdList" resultMap="BaseResultMap">
    SELECT <include refid="base_column"/>
    FROM `employee`
    <include refid="base_where"/>
    LIMIT #{start},#{pageSize}
  </select>
  
</mapper>